# -*- coding: utf-8 -*-
"""Training FRAS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KOmGt77qy1EXEb98BOtVHL9Dis2L-jjX
"""

r!apt-get install unrar

!unrar x /content/SeniorProject.rar /content/SeniorProject/

!pip install mtcnn

import cv2 as cv
import os
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

img = cv.imread("/content/SeniorProject/CLASSROOM/IMG_0452.jpg")
# opencv BGR channel format and plt reads images as RGB channel format

img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
plt.imshow(img) # RGB

from mtcnn.mtcnn import MTCNN

detector = MTCNN()
results = detector.detect_faces(img)

results

x,y,w,h = results[0]['box']

img = cv.rectangle(img, (x,y), (x+w, y+h), (0,0,255), 30)
plt.imshow(img)

my_face = img[y:y+h, x:x+w]
#Facenet takes as input 160x160
my_face = cv.resize(my_face, (160,160))
plt.imshow(my_face)

my_face

"""# Automate the preprocessing

"""

class FACELOADING:
    def __init__(self, directory):
        self.directory = directory
        self.target_size = (160,160)
        self.X = []
        self.Y = []
        self.detector = MTCNN()


    def extract_face(self, filename):
        img = cv.imread(filename)
        img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
        x,y,w,h = self.detector.detect_faces(img)[0]['box']
        x,y = abs(x), abs(y)
        face = img[y:y+h, x:x+w]
        face_arr = cv.resize(face, self.target_size)
        return face_arr


    def load_faces(self, dir):
        FACES = []
        for im_name in os.listdir(dir):
            try:
                path = dir + im_name
                single_face = self.extract_face(path)
                FACES.append(single_face)
            except Exception as e:
                pass
        return FACES

    def load_classes(self):
        for sub_dir in os.listdir(self.directory):
            path = self.directory +'/'+ sub_dir+'/'
            FACES = self.load_faces(path)
            labels = [sub_dir for _ in range(len(FACES))]
            print(f"Loaded successfully: {len(labels)}")
            self.X.extend(FACES)
            self.Y.extend(labels)

        return np.asarray(self.X), np.asarray(self.Y)


    def plot_images(self):
        plt.figure(figsize=(18,16))
        for num,image in enumerate(self.X):
            ncols = 3
            nrows = len(self.Y)//ncols + 1
            plt.subplot(nrows,ncols,num+1)
            plt.imshow(image)
            plt.axis('off')

faceloading = FACELOADING("/content/SeniorProject/students_dataset")
X, Y = faceloading.load_classes()

plt.figure(figsize=(40,36))
for num,image in enumerate(X):
    ncols = 3
    nrows = len(Y)//ncols + 1
    plt.subplot(nrows,ncols,num+1)
    plt.imshow(image)
    plt.axis('off')

"""# FaceNet part"""

!pip install keras-facenet

from keras_facenet import FaceNet
embedder = FaceNet()

def get_embedding(face_img):
    face_img = face_img.astype('float32')
    face_img = np.expand_dims(face_img, axis=0)
    yhat= embedder.embeddings(face_img)
    return yhat[0]

from keras.preprocessing.image import ImageDataGenerator
import numpy as np

# augmentation
data_gen = ImageDataGenerator(
    zoom_range=0.2,
    width_shift_range=0.2,
    height_shift_range=0.2,
    brightness_range=[0.8, 1.2],
    horizontal_flip=True
)


augmented_X = []
augmented_Y = []

for i, img in enumerate(X):
    img = np.expand_dims(img, axis=0)
    augmented_images = data_gen.flow(img, batch_size=1)

    # Generate 5 augmented images per original image
    for _ in range(5):
        aug_img = next(augmented_images)[0]
        augmented_X.append(aug_img)
        augmented_Y.append(Y[i])


augmented_X = np.array(augmented_X)
augmented_Y = np.array(augmented_Y)

# Combine original and augmented datasets
X_combined = np.concatenate((X, augmented_X))
Y_combined = np.concatenate((Y, augmented_Y))

print(f"Original dataset size: {len(X)}")
print(f"Augmented dataset size: {len(augmented_X)}")
print(f"Combined dataset size: {len(X_combined)}")

import matplotlib.pyplot as plt


def visualize_augmented_data(original, augmented, labels, num_images=5):
    plt.figure(figsize=(15, 10))

    for i in range(num_images):
        # Original image
        plt.subplot(num_images, 2, 2 * i + 1)
        plt.imshow(original[i].astype('uint8'))
        plt.title(f"Original: {labels[i]}")
        plt.axis('off')

        # Augmented image
        plt.subplot(num_images, 2, 2 * i + 2)
        plt.imshow(augmented[i].astype('uint8'))
        plt.title(f"Augmented: {labels[i]}")
        plt.axis('off')

    plt.tight_layout()
    plt.show()

visualize_augmented_data(X[:5], augmented_X[:5], Y[:5])

EMBEDDED_X = []

for img in X_combined:
    EMBEDDED_X.append(get_embedding(img))

EMBEDDED_X = np.asarray(EMBEDDED_X)

np.savez_compressed('faces_embeddings_done_6classes.npz', EMBEDDED_X, Y)

"""# SVM model

"""

from sklearn.preprocessing import LabelEncoder

encoder = LabelEncoder()
encoder.fit(Y)
Y = encoder.transform(Y)

Y

from sklearn.model_selection import train_test_split

# Use the combined dataset (augmented + original)
X_train, X_test, Y_train, Y_test = train_test_split(EMBEDDED_X, Y_combined, shuffle=True, random_state=17)

print(f"Training set size: {len(X_train)}")
print(f"Test set size: {len(X_test)}")

from sklearn.svm import SVC

model = SVC(kernel='linear', probability=True)
model.fit(X_train, Y_train)

print("SVM model trained successfully!")

ypreds_train = model.predict(X_train)
ypreds_test = model.predict(X_test)

from sklearn.metrics import accuracy_score


ypreds_train = model.predict(X_train)
ypreds_test = model.predict(X_test)

# Compute accuracy
train_accuracy = accuracy_score(Y_train, ypreds_train)
test_accuracy = accuracy_score(Y_test, ypreds_test)

print(f"Training Accuracy: {train_accuracy * 100:.2f}%")
print(f"Testing Accuracy: {test_accuracy * 100:.2f}%")

accuracy_score(Y_test,ypreds_test)

import pickle
#save the model
with open('svmFRAS_model_160x160.pkl','wb') as f:
    pickle.dump(model,f)